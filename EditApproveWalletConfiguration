import { CopyOutlined, DeleteOutlined, LoadingOutlined, PlusCircleOutlined, QuestionCircleFilled, UndoOutlined } from '@ant-design/icons';
import { AgGridReact } from 'ag-grid-react';
import { Button, Checkbox, Drawer, Input, message, Space, Spin, Switch, Tooltip } from "antd";
import _get from "lodash/get";
import moment from 'moment';
import React, { useEffect, useMemo, useState } from "react";
import { withAlert } from 'react-alert';
import { connect } from "react-redux";
import CommonSelect from "../../../Global/UIComponents/CommonSelect";
import genericGetData from "../../../Redux/Actions/genericGetData";
import genericPostData from "../../../Redux/Actions/genericPostData";


function EditWalletConfiguration(props) {

	const { open, setOpen, row } = props;
	const [chain, setchain] = useState([]);
	const [rowData, setRowData] = useState([]);
	const [gridApi, setGridApi] = useState(null);
	const [originalConfigData, setOriginalConfigData] = useState([]);
	const [loading, setLoading] = useState(false);
	const [newRowId, setNewRowId] = useState(-1);
	const [failedRegexConfig, setFailedRegexConfig] = useState([]);
	const [verificationLinkStatus, setVerificationLinkStatus] = useState(null); // this will track the current verification link status.
	const [originalVerificationLinkStatus, setOriginalVerificationLinkStatus] = useState(false); // this will store original verificaion link status. 
	const [linkStatusValue, setLinkStatusValue] = useState(null); // this is the status parameter value we are getting from API, we need to send the same while saving.
	const [lastEditedConfigId, setLastEditedConfigId] = useState(null);
	const [fundComments, setFundComments] = useState('');
	const [originalFundComments, setOriginalFundComments] = useState('');

	const onGridReady = (params) => {
		setGridApi(params.api);
	};

	const copyToClipboard = (text) => {
		navigator.clipboard.writeText(text).then(
			() => {
				message.success("Copied to clipboard");
			},
			(err) => {
				message.error("Failed to copy text");
				console.error("Could not copy text: ", err);
			}
		);
	};

	// colour and font style for sub grid 
	const getDetailRowStyle = (p) => {
		let backgroundColor = null, fontStyle = null;
		if (p && p.data) {
			if (p.data.action === 'D') {
				backgroundColor = "#ec988c"; // red
			}
			else if (p.data.status === 3) {
				if (p.data.action === "U") {
					backgroundColor = "#DBE9FA" // blue
				}
				else if (p.data.action === "I") {
					backgroundColor = "#AFE1AF" // green
				}
			}
			else if (p.data.status === 2) {
				if (p.data.action === "U") {
					backgroundColor = "#D3D3D3"; // gray
				}
			}
		}
		return {
			backgroundColor: backgroundColor,
			fontStyle: fontStyle,
		};
	};

	// height setting for sub grid
	const getDetailRowHeight = (params) => {
		if (params && params.data) {
			if (params.data.status === 2 && params.data.action === "U") {
				return 20;
			}
		}
		return null;
	};

	// update the isCellEditable function to correctly handle editing permissions
	const isCellEditable = (rowData, field) => {
		// If the row is new, all fields are editable
		if (rowData.configStatus === 'new') {
			return true;
		}

		// For rows with status 3 (Pending for approval)
		if (rowData.status === 3) {
			// If action is 'D', nothing should be editable
			if (rowData.action === 'D') {
				return false;
			}

			// For action 'I' (insert), all fields are editable
			if (rowData.action === 'I') {
				return true;
			}

			// For action 'U' (update), only these two fields are editable
			if (rowData.action === 'U') {
				return field === 'currencyID' || field === 'isActive' || field === 'comments';
			}

			return true;
		}

		if (rowData.status === 2) {

			if (rowData.action === 'U') {
				return false;
			}
			if (rowData.action === null) {
				return field === 'currencyID' || field === 'isActive' || field === 'comments';
			}
		}

		// Default case editable
		return true;
	};

	const IsActiveRenderer = (props) => {

		const handleCheckboxChange = (e) => {
			const newValue = e.target.checked ? 1 : 0;
			if (typeof props.onCheckboxChange === 'function') {
				props.onCheckboxChange(props.data, 'isActive', newValue);
			}
		};

		// Determine if checkbox should be disabled
		const isDisabled = !isCellEditable(props.data, 'isActive');

		return (
			<Checkbox
				checked={props.value === 1}
				onChange={handleCheckboxChange}
				disabled={isDisabled}
			/>
		);
	};

	// to ensure the current state of table remains the same after editing the cells
	useEffect(() => {
		if (gridApi && lastEditedConfigId !== null && rowData && rowData.length) {
			// Use setTimeout to ensure this runs after state updates and re-renders
			setTimeout(() => {
				// Find the index of the row in the current rowData
				const rowIndex = rowData.findIndex(r => r.configurationID === lastEditedConfigId);

				if (rowIndex !== -1) {
					// Scroll to this row
					gridApi.ensureIndexVisible(rowIndex, 'middle');
				}
				// Clear the lastEditedConfigId state
				setLastEditedConfigId(null);
			}, 50); // Slightly longer timeout to ensure rendering is complete
		}
	}, [rowData, lastEditedConfigId, gridApi]);

	useEffect(() => {
		const handleResize = () => {
			if (gridApi) {
				gridApi.sizeColumnsToFit();
			}
		};

		window.addEventListener('resize', handleResize);

		return () => {
			window.removeEventListener('resize', handleResize);
		};
	}, [gridApi]);

	useEffect(() => {
		const fetchBlockchainsData = () => {
			return new Promise((resolve, reject) => {
				try {
					genericGetData({
						dispatch: props.dispatch,
						url: 'api/walletverificationapi/GetSatoshiBlockchains',
						successCb: (data) => {
							setchain(data.data);
							resolve(data.data); // Resolve with the data
						},
						errorCb: (err) => {
							props.alert.error('Failed to fetch blockchains');
							reject(err);
						}
					});
				} catch (error) {
					props.alert.error('Error fetching blockchains dropdown data');
					reject(error);
				}
			});
		};

		const fetchData = async () => {
			if (open) {
				try {
					const blockchainData = await fetchBlockchainsData();
					// Pass the chainId data directly to loadExistingConfigurations
					loadExistingConfigurations(blockchainData);
				} catch (error) {
					console.error("Error in data fetching blockchains:", error);
				}
			}
		};

		fetchData();
	}, [open]);

	// to set the verification link status
	useEffect(() => {
		const fetchVerificationLinkStatus = () => {
			genericGetData({
				dispatch: props.dispatch,
				url: `api/walletverificationapi/GetFundWalletVerificationLinkStatus?fundId=${row.fundID}`,
				successCb: (data) => {
					console.log("data is: ", data);
					setVerificationLinkStatus(data.data[0].isActive);
					setOriginalVerificationLinkStatus(data.data[0].isActive);
					setLinkStatusValue(data.data[0].status);
					setFundComments(data.data[0].comments || '');
					setOriginalFundComments(data.data[0].comments || '');
				},
				errorCb: (err) => {
					props.alert.error('Failed to fetch verificationLinkStatus');
				}
			});
		};
		if (open) {
			fetchVerificationLinkStatus();
		}
	}, [open, row]);

	const fetchCurrenciesForBlockchain = (chainId, callback, configurationID) => {
		if (!chainId) {
			callback([]);
			return;
		}

		genericGetData({
			dispatch: props.dispatch,
			url: `api/walletverificationapi/GetCurrencyListForSatoshi?chainId=${chainId}`,
			dontshowmessage: true,
			successCb: (data) => {
				if (data && data.data) {
					// Add "All" option to currencyID array
					const currenciesWithAll = [
						{ cryptoCurrencyId: null, cryptoCurrencyName: "All" },
						...data.data
					];

					callback(currenciesWithAll);
					// After currency data is fetched and applied, scroll to the row
					if (configurationID && gridApi) {
						setTimeout(() => {
							const rowIndex = rowData.findIndex(r => r.configurationID === configurationID);
							if (rowIndex !== -1) {
								gridApi.ensureIndexVisible(rowIndex, 'middle');
							}
						}, 100); // Longer timeout to ensure the grid has updated
					}
				} else {
					callback([]);
				}
			},
			errorCb: (err) => {
				console.error('Failed to fetch currencies for chainId:', chainId, err);
				callback([]);
				if (err.status === 403) {
					props.history.push("/AccessDenied");
				}
			}
		});
	};

	const loadExistingConfigurations = (blockchainData) => {
		setLoading(true);
		genericGetData({
			dispatch: props.dispatch,
			url: `api/walletverificationapi/GetFundWalletConfiguration?fundIds=${row.fundID}`,
			successCb: (data) => {
				setOriginalConfigData(data.data);

				// For each config, fetch the available currencies
				const configsWithPromises = data.data.map(config => {
					return new Promise(resolve => {
						if (config.chainId) {
							fetchCurrenciesForBlockchain(config.chainId, (currencies) => {
								let currencyName = "";
								if (config.currencyID !== null) {
									const currency = currencies.find(c => c.cryptoCurrencyId === config.currencyID);
									if (currency) {
										currencyName = currency.cryptoCurrencyName;
									}
								}
								resolve({
									...config,
									availableCurrencies: currencies,
									currencySymbol: currencyName
								});
							});
						} else {
							resolve(config);
						}
					});
				});

				// When all promises are resolved, set the row data
				Promise.all(configsWithPromises).then(configsWithCurrencies => {
					setRowData(configsWithCurrencies);
				});

				setTimeout(() => {
					setLoading(false);
				}, 500)

			},
			errorCb: (err) => {
				console.error("Failed to load existing configurations:", err);
				props.alert.error('Failed to load existing configurations');
				setLoading(false);
			}
		});
	};

	const updateRowData = (row, field, value) => {
		setRowData(prevRows => {
			
			const newRows = prevRows.map(r => {
				return r.configurationID === row.configurationID && r.status == row.status
					? { ...r, [field]: value }
					: r;
			});

			return newRows;
		});
	};

	// Handler for adding new row
	const handleAddNewRow = () => {
		const newRow = {
			configurationID: newRowId,
			//configurationID: -Date.now(), // Negative timestamp for new rows,
			chainId: null,
			walletAddress: '',
			currencyID: null, // Changed from [] to null for single select
			availableCurrencies: [], // Initialize with empty array
			isActive: 1,
			comments: '',
			configStatus: 'new',
			status: 3, // Set as pending for approval
			modifiedBy: window.sessionStorage.getItem("loginName"),
			modifiedDate: moment.utc(),
			approvedBy: '',
			approvedDate: '',
			action: 'I'
		};
		setNewRowId(prev => prev - 1)
		setRowData(prevRows => [...prevRows, newRow]);
	};

	var onClickUndoButton = (data_old) => {
		const data = data_old.data;
		
		// Use setTimeout to defer the state update until after the current render cycle
		setTimeout(() => {
			if (data.configStatus === 'edited') {
				if (data.status === 2 && data.action === null) {
					// For status 2 rows, just reset the specific fields that could be changed
					setRowData(prevRows => prevRows.map(row => {
						if (row.configurationID === data.configurationID) {
							// Get the original values from the API data
							const originalRow = originalConfigData.find(r => r.configurationID === data.configurationID);
							if (originalRow) {
								return {
									...row,
									currencyID: originalRow.currencyID,
									currencySymbol: originalRow.currencySymbol,
									isActive: originalRow.isActive,
									comments: originalRow.comments || '',
									configStatus: 'original', // Reset the configStatus to original
									action: originalRow.action
								};
							}
							return row;
						}
						return row;
					}));
				}
				else if (data.status === 3 && (data.action === 'U' || data.action === 'I')) {
					setRowData(prevRows => prevRows.map(row => {
						if (row.configurationID === data.configurationID && row.status === data.status) {
							// Get the original values from the API data
							const originalRow = originalConfigData.find(r => (r.configurationID === data.configurationID && r.status === data.status));
							if (originalRow) {
								return {
									...row,
									chainId: originalRow.chainId,
									chainName: originalRow.chainName,
									walletAddress: originalRow.walletAddress,
									currencyID: originalRow.currencyID,
									currencySymbol: originalRow.currencySymbol,
									isActive: originalRow.isActive,
									comments: originalRow.comments || '',
									configStatus: 'edited'
								};
							}
							return row;
						}
						return row;
					}));
				}
				else {
					setRowData(prevRows => prevRows.filter(row => row.configurationID !== data.configurationID));
				}
			}
			else if (data.configStatus === 'new') {
				// Instead of removing the row, reset its values
				setRowData(prevRows => prevRows.map(row => {
					if (row.configurationID === data.configurationID) {
						// Keep the row but reset all its data fields
						return {
							...row,
							chainId: null,
							walletAddress: '',
							currencyID: null,
							chainName: '',
							currencySymbol: '',
							isActive: 1,
							comments: '',
							availableCurrencies: []
						};
					}
					return row;
				}));
			}
			//below case can be removed ig. but need a through check
			else if (data.configStatus === 'original') {
				setRowData(prevRows => {
					const filteredRows = prevRows.filter(row =>
						!(row.configStatus === 'edited')
					);
					return filteredRows;
				});
			}
			else if (data.configStatus === 'deleted') {
				setRowData(prevRows =>
					prevRows.map(row =>
						row.configurationID === data.configurationID ? { ...row, configStatus: 'original', isActive: 1, comments: row.comments || '', action: null } : row
					)
				);
			}
		}, 0);
	};

	var onClickDeleteButton = (data_old) => {
		const data = data_old.data
		
		// Defer execution to avoid render cycle conflicts
		setTimeout(() => {
			// For new rows, completely remove them from the grid
			if (data.configStatus === 'new' || (data.status === 3 && data.Action === 'I')) {
				setRowData(prevRows => prevRows.filter(row => row.configurationID !== data.configurationID));
			}
			// For edited rows or original rows, mark as deleted
			else {
				setRowData(prevRows => {
					// For edited rows, also mark the original as deleted
					if (data.configStatus === 'edited') {
						return prevRows.map(row => {
							if (row.configurationID === data.configurationID && row.status === data.status) {
								return { ...row, configStatus: 'deleted', isActive: 0 };
							}
							return row;
						});
					}
					// For original rows
					else {
						return prevRows.map(row => {
							if (row.configurationID === data.configurationID && row.status === data.status) {
								return { ...row, configStatus: 'deleted', isActive: 0, action: 'D' };
							}
							return row;
						});
					}
				});
			}
		}, 0);
	};

	// Handler for cell editing with improved logic for configStatus 2 and 3
	const handleCellEdit = (row, field, value) => {
		setLastEditedConfigId(row.configurationID);

		if (row.status === 2) {
			// For configStatus 2 rows, only allow editing currency and isActive fields
			if (field === 'currencyID' || field === 'isActive' || field === 'comments') {
				// Update the specific field
				// Also mark it as edited so we can track changes for undo
				if (row.configStatus !== 'edited') {
					updateRowData(row, 'configStatus', 'edited');
				}

				// If editing currencyID, also update the currencySymbol
				if (field === 'currencyID') {
					updateRowData(row, field, value[0]);
					const selectedCurrency = (row.availableCurrencies || []).find(c => c.cryptoCurrencyId === value);
					const currencyName = selectedCurrency ? selectedCurrency.cryptoCurrencyName : 'All';
					updateRowData(row, 'currencySymbol', currencyName);
				}
				else {
					updateRowData(row, field, value);
				}
			}
		} else {

			// Skip if the cell is not editable based on configStatus
			if (!isCellEditable(row, field)) {
				return;
			}

			if (field === 'chainId') {
				const selectedBlockchain = chain.find(b => b.blockChainID === value[0]);
				const chainName = selectedBlockchain ? selectedBlockchain.blockChainName : '';

				// Update the row with the new chainId
				updateRowData(row, 'chainId', value[0]);
				updateRowData(row, 'chainName', chainName);
				if (row.configStatus == null) {
					updateRowData(row, 'configStatus', "edited");
				}

				// Then fetch currencyID in the background
				fetchCurrenciesForBlockchain(value, (currencyID) => {
					// Update the row with available currencyID and reset the selected currency
					setRowData(prevRows => prevRows.map(r =>
						r.configurationID === row.configurationID ? {
							...r,
							availableCurrencies: currencyID,
							currencyID: null
						} : r
					));
				}, row.configurationID);
			} else if (field === 'currencyID') {
				// For currency selection
				const selectedCurrency = (row.availableCurrencies || []).find(c => c.cryptoCurrencyId === value[0]);
				const currencyName = selectedCurrency ? selectedCurrency.cryptoCurrencyName : 'All';

				updateRowData(row, 'currencyID', value[0]);
				updateRowData(row, 'currencySymbol', currencyName);
				if (row.configStatus == null) {
					updateRowData(row, 'configStatus', "edited");
				}
			}
			else if (field === 'isActive') {
				if (row.configStatus === 'original') {
					setRowData(prevRows => {
						const updatedRows = prevRows.map(r =>
							r.configurationID === row.configurationID ? { ...r, isActive: value, configStatus: 'edited' } : r
						);
						return updatedRows;
					});
				} else {
					updateRowData(row, 'isActive', value);
					if (row.configStatus == null) {
						updateRowData(row, 'configStatus', "edited");
					}
				}
			}
			else if (field === 'walletAddress' || field === 'comments') {
				updateRowData(row, field, value);
				if (row.configStatus == null) {
					updateRowData(row, 'configStatus', "edited");
				}
			}
			else {
				// For other fields, just update normally
				updateRowData(row, field, value);
			}

			// Update the configStatus to 'edited' if it's an original row
			if (row.configStatus === 'original') {
				updateRowData(row, 'configStatus', 'edited');
				updateRowData(row, 'status', 3); // Set status to 3 when row is edited
			}
		}
	}

	var handleActionStatus = (data) => {
		// Hide delete button for rows with status = 2 (Approved)
		const showDeleteButton = data.data.status !== 2 || (data.data.status == 2 && data.data.action !== null && data.data.action !== 'U');
		const showUndoButton = (showDeleteButton) || data.data.configStatus == 'deleted' || data.data.configStatus == 'edited'
		return (
			<Space>
				{/* Undo button */}
				{showUndoButton &&
					<Tooltip title={"Undo"}>
						<Button
							type="text"
							size="small"
							icon={<UndoOutlined style={{ fontSize: '17px', marginRight: "3px" }} />}
							onClick={() => { onClickUndoButton(data) }}
						/>
					</Tooltip>}
				{/* Delete button */}
				{showDeleteButton && (
					<Tooltip title={"Delete"}>
						<Button
							type="text"
							size="small"
							icon={<DeleteOutlined style={{ fontSize: '17px' }} />}
							onClick={() => { onClickDeleteButton(data) }}
						/>
					</Tooltip>
				)}
			</Space>
		);
	};

	// Column definitions for Ag Grid
	const columns = [
		{
			field: 'chainName',
			headerName: 'Blockchain',
			initialWidth: 150,
			headerTooltip: 'Blockchain',
			valueFormatter: (params) => {
				return params.value || '';
			},
			cellRenderer: (params) => {

				// Determine if chainId selection should be disabled
				const isDisabled = !isCellEditable(params.data, 'chainId');

				// If disabled, return a simple text input (or div) instead of the dropdown
				if (isDisabled) {
					return (
						<Input
							value={params.data.chainName}
							disabled={true}
							style={params.data.action === 'U' && params.data.status === 2 ? { height: '20px' } : {}}
						/>
					);
				}

				return (
					<CommonSelect
						value={params.data.chainName}
						onChange={(value) => handleCellEdit(params.data, 'chainId', value)}
						disabled={isDisabled}
						data={chain}
						dataKey={"blockChainID"}
						dataLabel={"blockChainName"}
						maxTagCount={"responsive"}
					/>
				);
			}
		},
		{
			field: 'currencySymbol',
			headerName: 'Currency',
			initialWidth: 115,
			headerTooltip: 'Currency',
			cellRenderer: (params) => {
				// Use the row's availableCurrencies if available
				const availableCurrencies = params.data.availableCurrencies || [];

				// Get the selected currency (single value, not array)
				const selectedCurrency = params.data.currencyID;

				// Determine if currency selection should be disabled
				const isDisabled = !isCellEditable(params.data, 'currencyID') || !params.data.chainId;

				const selectedCurrencyObj = availableCurrencies.find(c => c.cryptoCurrencyId === selectedCurrency);
				const displayValue = selectedCurrencyObj ? selectedCurrencyObj.cryptoCurrencyName : 'All';

				// If disabled, return a simple text input (or div) instead of the dropdown
				if (isDisabled) {
					return (
						<Input
							value={displayValue}
							disabled={true}
							style={params.data.action === 'U' && params.data.status === 2 ? { height: '20px' } : {}}
						/>
					);
				}

				return (
					<CommonSelect
						value={displayValue}
						onChange={(value) => handleCellEdit(params.data, 'currencyID', value)}
						disabled={isDisabled}
						data={availableCurrencies}
						dataKey={"cryptoCurrencyId"}
						dataLabel={"cryptoCurrencyName"}
						maxTagCount={"responsive"}
					/>
				);
			}
		},
		{
			field: 'walletAddress',
			headerName: 'Wallet Address',
			initialWidth: 390,
			headerTooltip: 'Wallet Address',
			cellRenderer: (params) => {
				// Determine if wallet address should be disabled
				const isDisabled = !isCellEditable(params.data, 'walletAddress');

				// Create a ref to maintain focus
				const inputRef = React.useRef(null);

				// Keep track of local state for the input value
				const [inputValue, setInputValue] = React.useState(params.value);

				// Handle local changes without triggering grid refresh
				const handleLocalChange = (e) => {
					setInputValue(e.target.value);
				};

				// Only update the actual data when the input loses focus
				const handleBlur = () => {
					handleCellEdit(params.data, 'walletAddress', inputValue);
				};

				return (
					<Input
						ref={inputRef}
						type="text"
						value={inputValue}
						onChange={handleLocalChange}
						onBlur={handleBlur}
						disabled={isDisabled}
						style={params.data.action === 'U' && params.data.status === 2 ? { height: '20px' } : {}}
						status={failedRegexConfig.includes(params.data.configurationID) ? "error" : null}
						allowClear={true}
					/>
				);
			}
		},
		{
			field: 'isActive',
			headerName: 'Is Active',
			initialWidth: 100,
			headerTooltip: 'Is Active',
			cellRenderer: 'isActiveRenderer',
			cellRendererParams: {
				onCheckboxChange: (rowData, field, value) => {
					handleCellEdit(rowData, field, value);
				}
			}
		},
		{
			field: 'comments',
			headerName: 'Comments',
			initialWidth: 170,
			headerTooltip: 'Comments',
			cellRenderer: (params) => {
				// Determine if comments should be disabled
				const isDisabled = !isCellEditable(params.data, 'comments');

				// Create a ref to maintain focus
				const inputRef = React.useRef(null);

				// Keep track of local state for the input value
				const [inputValue, setInputValue] = React.useState(params.value || '');

				// Handle local changes without triggering grid refresh
				const handleLocalChange = (e) => {
					setInputValue(e.target.value);
				};

				// Only update the actual data when the input loses focus
				const handleBlur = () => {
					handleCellEdit(params.data, 'comments', inputValue);
				};

				return (
					<Input
						ref={inputRef}
						type="text"
						value={inputValue}
						onChange={handleLocalChange}
						onBlur={handleBlur}
						disabled={isDisabled}
						style={params.data.action === 'U' && params.data.status === 2 ? { height: '20px' } : {}}
						allowClear={true}
					/>
				);
			}
		},

		{
			field: 'modifiedBy',
			headerName: 'Modified Date and By',
			initialWidth: 190,
			headerTooltip: 'Modified Date and By',
			valueGetter: p => {
				const modifierName = p.data.modifiedBy || p.data.versionSource || '';
				return moment(p.data.modifiedDate).format("MM-DD-YY hh:mm") + '; ' + modifierName;
			},
		},
		{
			field: 'approvedBy',
			headerName: 'Approved Date and By',
			initialWidth: 190,
			headerTooltip: 'Approved Date and By',
			valueGetter: p => {
				return p.data.approvedBy ? moment(p.data.approvedDate).format("MM-DD-YY hh:mm") + '; ' + p.data.approvedBy : '';
			},
		},
		{
			field: 'action',
			headerName: 'Action',
			initialWidth: 100,
			headerTooltip: 'Action',
			flex: 1.2,
			cellRenderer: handleActionStatus,
		}
	];

	const defaultColDef = useMemo(() => ({
		editable: false,
		sortable: false,
		filter: false,
		resizable: true,
		minWidth: 100,
		suppressMovable: true,
		lockPosition: true,
		flex: 0,
		suppressSizeToFit: true,
		maintainColumnWidths: true,
		suppressMenu: true
	}), []);

	const onClose = () => {
		setVerificationLinkStatus(null);
		setRowData(null);
		setOriginalConfigData(null);
		setFundComments('')
		setOriginalFundComments('');
		setOpen(false);
	};

	const onChange = checked => {
		if (checked == true) {
			setVerificationLinkStatus(1);
		}
		else {
			setVerificationLinkStatus(0);
		}
	};

	// Handler for saving configurations
	const saveWalletConfiguration = () => {
		setLoading(true);
		// Filter rows that need to be saved (new or edited)
		const configurationsToSave = rowData.filter(row =>
			((row.action === 'I' || row.action === 'U') && row.chainName && row.walletAddress && row.status === 3 && row.configStatus) || (row.configStatus == 'edited' && row.status == 2)
		);
		// Also include rows marked for deletion
		const configurationsToDelete = rowData.filter(row =>
			row.configStatus === 'deleted' &&
			row.configurationID > 0
		);
		// Validate at least one configuration exists
		if (configurationsToSave.length === 0 && configurationsToDelete.length === 0 && verificationLinkStatus === originalVerificationLinkStatus && fundComments === originalFundComments) {
			props.alert.error('No changes to save');
			setLoading(false);
			return;
		}

		// Prepare all configurations (new, edited, and deleted)
		const allConfigurations = [

			...configurationsToSave.map(config => ({
				ConfigurationID: config.configurationID,
				FundID: row.fundID,
				ChainID: config.chainId,
				CurrencyID: config.currencyID,
				WalletAddress: config.walletAddress,
				IsActive: config.isActive,
				Comments: config.comments || '',
				Action: config.action ? config.action : 'U', // if action is null (in case of permanent row) than update action to U
				Status: config.status || 3 // Status 3 is for pending
			})),
			...configurationsToDelete.map(config => ({
				ConfigurationID: config.configurationID,
				FundID: row.fundID,
				ChainID: config.chainId,
				WalletAddress: config.walletAddress,
				CurrencyID: config.currencyID,
				IsActive: 0, // Inactive/Deleted
				Comments: config.comments || '',
				Action: 'D',
				Status: config.status || 3 // Status 3 is for pending
			}))
		];
		// Make API call to save configurations
		genericPostData({
			dispatch: props.dispatch,
			url: 'api/walletverificationapi/SaveFundWalletConfigurations',
			reqObj: {
				fundID: row.fundID,
				isActiveVerificationLink: verificationLinkStatus === originalVerificationLinkStatus ? null : verificationLinkStatus,
				statusVerificationLink: linkStatusValue,
				fundComments: fundComments === originalFundComments ? null : fundComments, 
				fundWalletConfiguration: allConfigurations,
				modifiedBy: window.sessionStorage.getItem("loginName"),
				blockChainList: chain,
				remainingConfigs: rowData
			},
			successCb: (response) => {
				// check if regex is failed for any config.
				if (response.data["regex"].length > 0) {
					setFailedRegexConfig(response.data["regex"]);
					props.alert.error('Wallet Address Format is incorrect');
				}
				else if (response.data["duplicates"].length > 0) {
					props.alert.error('This configuration already exists');
				}
				else {
					setOriginalVerificationLinkStatus(verificationLinkStatus);
					setOriginalFundComments(fundComments);
					props.alert.success('Changes saved successfully');
					// Reload configurations
					loadExistingConfigurations(chain);
				}
				setLoading(false);
			},
			errorCb: (err) => {
				if (err.response && err.response.data === "regex_failure") {
					props.alert.error('Regex validation failed for wallet address');
				} else {
					props.alert.error('Failed to save configurations: ' + (err.message || 'Unknown error'));
				}
				setLoading(false);
			}
		});
	};

	return (
		<>
			<Drawer
				title={
					<div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%' }}>
						<span style={{ color: 'white' }}> Edit Wallet Configuration </span>
						<Tooltip title="Peer review is required after any changes in link status or configurations.">
							<QuestionCircleFilled style={{ color: 'white', fontSize: '16px', cursor: 'pointer' }} />
						</Tooltip>
					</div>
				}
				width="50%"
				onClose={onClose}
				open={open}
				placement="right"
				visible={open}
				headerStyle={{
					paddingTop: '40px',  // Add extra padding at the top
					height: 'auto',
					backgroundColor: '#005A9C',
					borderBottom: '1px solid #e8e8e8',
					zIndex: 1000
				}}
				style={{
					marginTop: '40px'  // Add margin to the entire drawer
				}}
				closable={false}
			>
				<div style={{ display: 'flex', flexDirection: 'column', height: '100%', padding: '0px 16px 16px 16px' }}>
					{/* BusinessClients and Funds Filter */}
					<div style={{ display: 'flex', gap: '20px', marginBottom: '12px' }}>
						<div style={{ flex: 1 }}>
							<div style={{ fontWeight: 'bold', marginBottom: '8px' }}>Client</div>
							<Tooltip title={row && row.businessClientName ? row.businessClientName : ''}>
								<Input
									placeholder='Client'
									value={row && row.businessClientName ? row.businessClientName : ''}
									style={{ width: '100%' }}
									readOnly
								/>
							</Tooltip>
						</div>

						<div style={{ flex: 1 }}>
							<div style={{ fontWeight: 'bold', marginBottom: '8px' }}>Fund</div>
							<Tooltip title={row && row.fundName ? row.fundName : ''}>
								<Input
									placeholder='Fund'
									value={row && row.fundName ? row.fundName : ''}
									style={{ width: '100%' }}
									readOnly
								/>
							</Tooltip>
						</div>
					</div>

					{/* Verification Link Display and inactive/active verification link switch */}
					<div style={{ display: 'flex', gap: '20px', marginBottom: '10px' }}>
						<div style={{ flex: 3 }}>
							<div style={{ fontWeight: 'bold', marginBottom: '8px' }} >Verification Link</div>
							<div style={{ display: 'flex' }}>
								<Tooltip title={row && row.verificationLink ? row.verificationLink : ''}>
									<Input
										placeholder='Verification Link'
										value={row && row.verificationLink ? row.verificationLink : ''}
										style={{ width: '100%' }}
										readOnly
										suffix={<Button
											type="small"
											icon={<CopyOutlined />}
											onClick={() => copyToClipboard(row && row.verificationLink ? row.verificationLink : '')}
										/>}
									/>
								</Tooltip>

							</div>
						</div>
						<div>
							<div>
								<div
									style={{ fontWeight: 'bold' }}
								>Link Status</div>
							</div>
							<div>
								<Switch
									checked={verificationLinkStatus}
									onChange={onChange}
									style={{ marginTop: '10px' }}
								/>
							</div>
						</div>
					</div>

					<div style={{ marginBottom: '10px' }}>
						<div style={{ fontWeight: 'bold', marginBottom: '8px' }}>Comments</div>
						<Input.TextArea
							value={fundComments}
							onChange={(e) => setFundComments(e.target.value)}
							rows={2}
							style={{ width: '100%' }}
							allowClear={true}
							/>
					</div>

					{/* Table with 7 columns and Add new Row button */}
					<div style={{ display: 'flex', justifyContent: 'flex-end', marginBottom: '8px' }}>
						<Button
							type="primary"
							icon={<PlusCircleOutlined />}
							onClick={handleAddNewRow}
							style={{ backgroundColor: "#005A9C" }}
						>
							Add Configuration
						</Button>
					</div>

					{loading && (
						<div style={{
							position: 'absolute',
							top: 0,
							left: 0,
							zIndex: 10,
							width: '100%',
							height: '100%',
							paddingTop: 150,
							display: 'flex',
							justifyContent: 'center',
							alignItems: 'center',
						}}>
							<Spin indicator={<LoadingOutlined style={{ fontSize: 48 }} spin />} />
						</div>
					)}

					<div className="ag-theme-alpine rounded-grid" style={{ flexGrow: 1, width: '100%' }}>

						<AgGridReact
							columnDefs={columns}
							rowData={rowData}
							components={{ isActiveRenderer: IsActiveRenderer }}
							getRowStyle={getDetailRowStyle}
							getRowHeight={getDetailRowHeight}
							pagination={false}
							onGridReady={onGridReady}
							animateRows={true}
							defaultColDef={defaultColDef}
							suppressHorizontalScroll={false}
							masterDetail={false}
							getRowNodeId={(data) => data.configurationID} // Ensure rows are tracked by configurationID
							suppressRowHoverHighlight={false}
							rowSelection="single"
							enableCellTextSelection={true}
							ensureDomOrder={true}
							suppressPropertyNamesCheck={true}
							suppressReactUi={false}
							maintainScrollPosition={true}
							suppressRowClickSelection={true}
						/>
					</div>

					{/* Close and Save button */}
					<div style={{
						display: 'flex',
						justifyContent: 'flex-end',
						gap: '12px',
						padding: '16px',
						borderTop: '1px solid #e5e7eb',
						backgroundColor: '#f9fafb'
					}}>
						<Button
							label='Close'
							onClick={onClose}
							style={{
								padding: '8px 20px',
								fontSize: '14px',
								borderRadius: '8px'
							}}
						>
							Close
						</Button>
						<Button
							type="primary"
							label='Save'
							onClick={saveWalletConfiguration}
							style={{
								padding: '8px 20px',
								fontSize: '14px',
								backgroundColor: "#005A9C",
								fontWeight: 500,
								borderRadius: '8px',
								color: 'white',
								border: 'none',
							}}
						>
							Save
						</Button>
					</div>
				</div>
			</Drawer>
		</>
	);
}

function mapStateToProps(state) {
	let businessClientList = _get(state, "businessClientList.data.data", []);
	return { businessClientList }
}

export default connect(mapStateToProps)(withAlert()(EditWalletConfiguration));
