import { Button, Drawer, Input, Switch, Space, Tooltip, Select, Checkbox } from "antd";
import { DeleteOutlined, UndoOutlined, PlusCircleOutlined } from '@ant-design/icons';
import _get from "lodash/get";
import React, { useEffect, useState, useMemo } from "react";
import { withAlert } from 'react-alert';
import { connect } from "react-redux";
import { Label } from "reactstrap";
import genericGetData from "../../../Redux/Actions/genericGetData";
import genericPostData from "../../../Redux/Actions/genericPostData";
import { AgGridReact } from 'ag-grid-react';
import moment from 'moment';

function EditApproveWalletConfiguration(props) {

    const { open, setOpen, dispatch, alert, row } = props;
    const [chain, setchain] = useState([]);
    const [currency, setCurrency] = useState([]);
    const [currenciesList, setCurrenciesList] = useState([]);
    const [gridData, setGridData] = useState(props.data);
    const [verificationLinkStatus, setVerificationLinkStatus] = useState(false);
    const [rowData, setRowData] = useState([]);

    const IsActiveRenderer = (props) => {
        return (
            <Checkbox
                checked={props.value === 1}
                onChange={(e) => props.onCheckboxChange(props.data, e.target.checked ? 1 : 0)}
            />
        );
    };

    useEffect(() => {
        if (row && row.isActive !== undefined) {
            setVerificationLinkStatus(row.isActive === 1);
        }
    }, [row]);

    useEffect(() => {
        const fetchBlockchainsData = async () => {
            try {
                genericGetData({
                    dispatch,
                    url: 'api/walletverificationapi/GetSatoshiBlockchains',
                    successCb: (data) => {
                        setchain(data.data);
                    },
                    errorCb: (err) => {
                        alert.error('Failed to fetch blockchains');
                    }
                });
            } catch (error) {
                alert.error('Error fetching blockchains dropdown data');
            }
        };

        if (open) {
            fetchBlockchainsData();
            loadExistingConfigurations();
        }
    }, [open]);

    useEffect(() => {
        console.log("props.data", props.data);
        setGridData(props.data);
    }, [props.data]);

    const fetchCurrenciesForBlockchain = (blockchain, callback) => {
        if (!blockchain) {
            callback([]);
            return;
        }

        genericGetData({
            dispatch,
            url: `api/walletverificationapi/GetCurrencyListForSatoshi?chainId=${blockchain}`,
            dontshowmessage: true,
            successCb: (data) => {
                if (data && data.data) {
                    callback(data.data);
                } else {
                    callback([]);
                }
            },
            errorCb: (err) => {
                console.error('Failed to fetch currencies for blockchain:', blockchain, err);
                callback([]);
                if (err.status === 403) {
                    props.history.push("/AccessDenied");
                }
            }
        });
    };

    var onClickUndoButton = (data) => {
        if (data.status === 'edited') {
            setRowData(prevRows => prevRows.filter(row => row.id !== data.id));
        } else if (data.status === 'new') {
            setRowData(prevRows => prevRows.filter(row => row.id !== data.id));
        } else if (data.status === 'original') {
            const editedRow = rowData.find(row =>
                row.status === 'edited' && row.originalId === data.id
            );

            if (editedRow) {
                setRowData(prevRows => prevRows.filter(row => row.id !== editedRow.id));
            }
        }
    };

    var onClickDeleteButton = (data) => {
        if (data.status === 'edited' && data.originalId) {
            setRowData(prevRows => prevRows.map(row =>
                (row.id === data.originalId || row.id === data.id)
                    ? { ...row, status: 'deleted', isActive: 0 }
                    : row
            ));
        } else if (data.status === 'new') {
            setRowData(prevRows => prevRows.filter(row => row.id !== data.id));
        } else if (data.status === 'original') {
            setRowData(prevRows => {
                const withoutEdited = prevRows.filter(row =>
                    !(row.status === 'edited' && row.originalId === data.id)
                );

                return withoutEdited.map(row =>
                    row.id === data.id
                        ? { ...row, status: 'deleted', isActive: 0 }
                        : row
                );
            });
        }
    };

    var handleActionStatus = (data) => (
        <Space>
            <Tooltip title={"Undo"}>
                <Button
                    type="text"
                    size="small"
                    icon={<UndoOutlined style={{ fontSize: '17px', marginRight: "3px" }} />}
                    onClick={() => { onClickUndoButton(data) }}
                />
            </Tooltip>
            <Tooltip title={"Delete"}>
                <Button
                    type="text"
                    size="small"
                    icon={<DeleteOutlined style={{ fontSize: '17px' }} />}
                    onClick={() => { onClickDeleteButton(data) }}
                />
            </Tooltip>
        </Space>
    );

    const columns = [
        {
            field: 'blockchain',
            headerName: 'Blockchain',
            valueFormatter: (params) => {
                const blockchain = chain.find(b => b.blockChainID === params.value);
                return blockchain ? blockchain.blockchainName : '';
            },
            cellRenderer: (params) => {
                const isDisabled = params.data.status === 'original' ||
                    (params.data.status === 'edited' && params.data.originalId);

                return (
                    <Select
                        style={{ width: '100%' }}
                        value={params.value}
                        onChange={(value) => handleCellEdit(params.data, 'blockchain', value)}
                        disabled={isDisabled}
                    >
                        {chain.map(blockchain => (
                            <Select.Option key={blockchain.blockChainID} value={blockchain.blockChainID}>
                                {blockchain.blockchainName}
                            </Select.Option>
                        ))}
                    </Select>
                );
            }
        },
        {
            field: 'walletAddress',
            headerName: 'Wallet Address',
            cellRenderer: (params) => {
                const isDisabled = params.data.status === 'original' ||
                    (params.data.status === 'edited' && params.data.originalId);

                return (
                    <Input
                        value={params.value}
                        onChange={(e) => handleCellEdit(params.data, 'walletAddress', e.target.value)}
                        disabled={isDisabled}
                    />
                );
            }
        },
        {
            field: 'currencies',
            headerName: 'Currency',
            cellRenderer: (params) => {
                const availableCurrencies = params.data.availableCurrencies || [];
                const selectedCurrencies = Array.isArray(params.value) ? params.value :
                    (params.value ? [params.value] : []);

                return (
                    <Select
                        style={{ width: '100%' }}
                        value={selectedCurrencies}
                        onChange={(value) => handleCellEdit(params.data, 'currencies', value)}
                        disabled={!params.data.blockchain}
                        mode="multiple"
                    >
                        {availableCurrencies.map(curr => (
                            <Select.Option
                                key={curr.cryptoCurrencyId}
                                value={curr.cryptoCurrencyId}
                            >
                                {curr.cryptoCurrencyName}
                            </Select.Option>
                        ))}
                    </Select>
                );
            }
        },
        {
            field: 'isActive',
            headerName: 'Is Active',
            cellRenderer: 'isActiveRenderer',
            cellRendererParams: {
                onCheckboxChange: (rowData, newValue) => handleCellEdit(rowData, 'isActive', newValue)
            }
        },
        {
            field: 'modifiedBy',
            headerName: 'Modified Date and By',
            valueGetter: p => moment(p.data.modifiedBy).format("MM-DD-YYYY hh:mm") + '; ' + p.data.modifiedBy,
        },
        {
            field: 'approvedBy',
            headerName: 'Approved Date and By',
            valueGetter: p => moment(p.data.approvedBy).format("MM-DD-YYYY hh:mm:ss") + '; ' + p.data.approvedBy,
        },
        {
            headerName: 'Action',
            field: 'action',
            flex: 1.2,
            cellRenderer: handleActionStatus,
        }
    ];

    const defaultColDef = useMemo(() => ({
        editable: false,
        sortable: false,
        filter: false,
        resizable: true,
        minWidth: 100,
        suppressMovable: true,
        lockPosition: true,
        flex: 2
    }));

    const onClose = () => {
        setOpen(false);
    };

    const updateRowData = (row, field, value) => {
        setRowData(prevRows => prevRows.map(r =>
            r.id === row.id ? { ...r, [field]: value } : r
        ));
    };

    const handleCellEdit = (row, field, value) => {
        if (field === 'blockchain') {
            fetchCurrenciesForBlockchain(value, (currencies) => {
                if (row.status === 'original') {
                    const editedRow = {
                        ...row,
                        id: `edited-${Date.now()}`,
                        originalId: row.id,
                        status: 'edited',
                        blockchain: value,
                        availableCurrencies: currencies,
                        currencies: []
                    };

                    setRowData(prevRows => {
                        const originalIndex = prevRows.findIndex(r => r.id === row.id);
                        return [
                            ...prevRows.slice(0, originalIndex + 1),
                            editedRow,
                            ...prevRows.slice(originalIndex + 1)
                        ];
                    });
                } else {
                    setRowData(prevRows => prevRows.map(r =>
                        r.id === row.id ? {
                            ...r,
                            blockchain: value,
                            availableCurrencies: currencies,
                            currencies: []
                        } : r
                    ));
                }
            });
        } else {
            updateRowData(row, field, value);
        }
    };

    const onChange = checked => {
        setVerificationLinkStatus(checked);
    };

    const handleAddNewRow = () => {
        const newRow = {
            id: `new-${Date.now()}`,
            blockchain: '',
            walletAddress: '',
            currencies: [],
            availableCurrencies: [],
            isActive: 1,
            status: 'new',
            modifiedBy: '',
            modifiedDate: new Date().toString(),
            approvedBy: '',
            approvedDate: ''
        };
        setRowData(prevRows => [...prevRows, newRow]);
    };

    const loadExistingConfigurations = () => {
        genericGetData({
            dispatch,
            url: `api/walletverificationapi/GetFundWalletConfiguration?fundId=${row.fundID}`,
            successCb: (data) => {
                const existingConfig = data.data.map(config => ({
                    ...config,
                    status: 'original',
                    id: `original-${config.ConfigurationID}`
                }));

                const configsWithPromises = existingConfig.map(config => {
                    return new Promise(resolve => {
                        if (config.blockchain) {
                            fetchCurrenciesForBlockchain(config.blockchain, (currencies) => {
                                resolve({
                                    ...config,
                                    availableCurrencies: currencies
                                });
                            });
                        } else {
                            resolve(config);
                        }
                    });
                });

                Promise.all(configsWithPromises).then(configsWithCurrencies => {
                    setRowData(configsWithCurrencies);
                });
            },
            errorCb: (err) => {
                alert.error('Failed to load existing configurations');
            }
        });
    };

    const saveWalletConfiguration = () => {
        const configurationsToSave = rowData.filter(row =>
            (row.status === 'new' || row.status === 'edited') &&
            row.blockchain &&
            row.walletAddress
        );

        const configurationsToDelete = rowData.filter(row =>
            row.status === 'deleted' &&
            !row.id.startsWith('new-')
        );

        if (configurationsToSave.length === 0 && configurationsToDelete.length === 0) {
            alert.error('No changes to save');
            return;
        }

        const allConfigurations = [
            ...configurationsToSave.map(config => ({
                configurationID: config.originalId ?
                    config.originalId.replace('original-', '') :
                    (config.id && !config.id.startsWith('new-') ? config.id.replace('original-', '') : null),
                blockchain: config.blockchain,
                walletAddress: config.walletAddress,
                currencies: config.currencies || [],
                isActive: 1
            })),
            ...configurationsToDelete.map(config => ({
                configurationID: config.id.startsWith('original-') ?
                    config.id.replace('original-', '') : config.id,
                blockchain: config.blockchain,
                walletAddress: config.walletAddress,
                currencies: config.currencies || [],
                isActive: 0
            }))
        ];

        genericPostData({
            dispatch,
            url: 'api/walletverificationapi/SaveWalletConfigurations',
            reqObj: {
                fundID: row.fundID,
                isActiveVerificationLink: verificationLinkStatus ? 1 : 0,
                statusVerificationLink: 3,
                fundWalletConfiguration: JSON.stringify(allConfigurations),
                modifiedBy: ""
            },
            successCb: (response) => {
                alert.success('Configurations saved successfully');
                loadExistingConfigurations();
            },
            errorCb: (err) => {
                alert.error('Failed to save configurations: ' + (err.message || 'Unknown error'));
            }
        });
    };

    return (
        <>
            <Drawer
                title="Edit Wallet Configuration"
                width="50%"
                onClose={onClose}
                open={open}
                placement="right"
                visible={open}
            >
                <div style={{ display: 'flex', flexDirection: 'column', height: '100%', padding: '16px' }}>
                    <div style={{ display: 'flex', gap: '20px', marginBottom: '20px' }}>
                        <div>
                            <Label htmlFor="clients" style={{ marginBottom: '10px' }}>Client</Label>
                            <Tooltip title={row && row.businessClientName ? row.businessClientName : ''}>
                                <Input
                                    placeholder='Client'
                                    value={row && row.businessClientName ? row.businessClientName : ''}
                                    style={{ width: '100%' }}
                                    readOnly
                                />
                            </Tooltip>
                        </div>

                        <div>
                            <Label htmlFor="funds" style={{ marginBottom: '10px' }}>Fund</Label>
                            <Tooltip title={row && row.fundName ? row.fundName : ''}>
                                <Input
                                    placeholder='Fund'
                                    value={row && row.fundName ? row.fundName : ''}
                                    style={{ width: '100%' }}
                                    readOnly
                                />
                            </Tooltip>
                        </div>
                    </div>

                    <div style={{ display: 'flex', gap: '20px', marginBottom: '20px' }}>
                        <div>
                            <Label htmlFor="verification-link">Verification Link</Label>
                            <Tooltip title={row && row.verificationLink ? row.verificationLink : ''}>
                                <Input
                                    placeholder='Verification Link'
                                    value={row && row.verificationLink ? row.verificationLink : ''}
                                    style={{ width: '100%' }}
                                    readOnly
                                />
                            </Tooltip>
                        </div>
                        <div>
                            <div>
                                <Label htmlFor="verification-link-status">Link Status</Label>
                            </div>
                            <div>
                                <Switch checked={verificationLinkStatus} onChange={onChange} style={{ marginTop: '10px' }} />
                            </div>
                        </div>
                    </div>

                    <div style={{ display: 'flex', justifyContent: 'flex-end', marginBottom: '16px' }}>
                        <Button
                            type="primary"
                            icon={<PlusCircleOutlined />}
                            onClick={handleAddNewRow}
                        >
                            Add New Configuration
                        </Button>
                    </div>

                    <div className="ag-theme-alpine rounded-grid" style={{ flexGrow: 1, width: '100%' }}>
                        <AgGridReact
                            columnDefs={columns}
                            rowData={rowData}
                            components={{
                                isActiveRenderer: (props) => IsActiveRenderer({
                                    ...props,
                                    onCheckboxChange: props.onCheckboxChange
                                }),
                            }}
                            pagination={false}
                            animateRows={true}
                            defaultColDef={defaultColDef}
                            domLayout='autoHeight'
                            suppressHorizontalScroll={false}
                            masterDetail={true}
                        />
                    </div>

                    <div style={{ display: 'flex', justifyContent: 'space-between', marginTop: '16px' }}>
                        <Button
                            label='Cancel'
                            onClick={onClose}
                        >
                            Cancel
                        </Button>
                        <Button
                            type="primary"
                            label='Save'
                            onClick={saveWalletConfiguration}
                            style={{ backgroundColor: "#005A9C" }}
                        >
                            Save
                        </Button>
                    </div>
                </div>
            </Drawer>
        </>
    );
}

function mapStateToProps(state) {
    let businessClientList = _get(state, "businessClientList.data.data", []);
    return { businessClientList }
}

export default connect(mapStateToProps)(withAlert()(EditApproveWalletConfiguration));
